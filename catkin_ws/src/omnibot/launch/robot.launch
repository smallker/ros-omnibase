<launch>
  <arg name="ticks_per_meter" value="10000" />
  <arg name="wheel_separation" value="0.2" />
  <arg name="ppr" value="900"/>
  <arg name="d_wheel" value="0.06"/>
  <arg name="wheel_base" value="0.11"/>
  <arg name="urdf_file" default="$(find omnibot)/urdf/robot.xacro" />
  <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg urdf_file)" />

  <!-- Publish the robot state -->
  <node name="robot_state_publisher" pkg="robot_state_publisher"
        type="robot_state_publisher">
    <param name="publish_frequency" value="10.0"/>
  </node>

  <!-- Provide simulated control of the robot joint angles -->
  <node name="joint_state_publisher" pkg="joint_state_publisher"
        type="joint_state_publisher">
    <param name="use_gui" value="False" />
    <param name="rate" value="10.0"/>
  </node>

  <node name="node_odometry" pkg="omnibot" type="node_odometry.py">
    <rosparam subst_value="true">
      ticks_per_meter: $(arg ticks_per_meter)
      wheel_separation: $(arg wheel_separation)
      d_wheel: $(arg d_wheel)
      ppr: $(arg ppr)
      wheel_base: $(arg wheel_base)
    </rosparam>
  </node>

  <node name="node_robot_mock" pkg="omnibot" type="node_robot_mock.py" output="screen">
    <rosparam subst_value="true">
      d_wheel: $(arg d_wheel)
      ppr: $(arg ppr)
      wheel_base: $(arg wheel_base)
    </rosparam>
  </node>

  <node pkg="rosserial_python" type="serial_node.py" name="serial_node" output="screen">
    <param name="port" value="tcp"/>
  </node>
  <node name="teleop" pkg="omnibot" type="node_teleop.py" output="screen"/>
  <node name="node_autonomous" pkg="omnibot" type="node_autonomous.py" output="screen"/>
  <!-- <node name="node_imu" pkg="omnibot" type="node_imu.py" output="screen"/> -->

  <node name="rviz" pkg="rviz" type="rviz"
        args="-d $(find omnibot)/config/view.rviz" />

</launch>
